{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initalState = {\n  userlog: undefined,\n  fuckthis: false\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'USER_LOG') {\n    return _objectSpread({}, initalState, {\n      userlog: true\n    });\n  }\n}","map":{"version":3,"sources":["E:/nagda/reducers/test.js"],"names":["initalState","userlog","undefined","fuckthis","state","action","type"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAEC,SADO;AAEhBC,EAAAA,QAAQ,EAAE;AAFM,CAApB;AAMA,eAAe,YAAuC;AAAA,MAA7BC,KAA6B,uEAArBJ,WAAqB;AAAA,MAARK,MAAQ;;AAClD,MAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC5B,6BACON,WADP;AACoBC,MAAAA,OAAO,EAAE;AAD7B;AAIH;AACJ","sourcesContent":["const initalState = {\r\n    userlog: undefined,\r\n    fuckthis: false\r\n};\r\n\r\n\r\nexport default function (state = initalState, action) {\r\n    if (action.type === 'USER_LOG') {\r\n        return {\r\n            ...initalState, userlog: true\r\n\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}