{"ast":null,"code":"var _jsxFileName = \"E:\\\\nagda\\\\pages\\\\home.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport iniModel from '../models/redux.state.ini';\nimport Layout from '../components/Layout';\n\nclass Page extends Component {\n  static getInitialProps({\n    store,\n    isServer,\n    pathname,\n    query\n  }) {\n    store.dispatch({\n      type: 'FOO',\n      payload: 'foo'\n    }); // component will be able to read from store's state when rendered\n\n    return {\n      state: _objectSpread({}, iniModel)\n    }; // you can pass some custom props to component from here\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n  }\n\n  render() {\n    return __jsx(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"hello world\"));\n  }\n\n}\n\nconst stateToProps = state => {\n  return _objectSpread({}, state);\n};\n\nexport default connect(stateToProps)(Page);","map":{"version":3,"sources":["E:/nagda/pages/home.js"],"names":["React","Component","Fragment","connect","iniModel","Layout","Page","getInitialProps","store","isServer","pathname","query","dispatch","type","payload","state","componentDidMount","console","log","props","render","stateToProps"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AACzB,SAAOM,eAAP,CAAuB;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA;AAA5B,GAAvB,EAA2D;AACvDH,IAAAA,KAAK,CAACI,QAAN,CAAe;AAACC,MAAAA,IAAI,EAAE,KAAP;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAAf,EADuD,CACR;;AAC/C,WAAO;AAACC,MAAAA,KAAK,oBAAMX,QAAN;AAAN,KAAP,CAFuD,CAExB;AAClC;;AAEDY,EAAAA,iBAAiB,GAAG;AAEhBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CADJ;AAOH;;AAnBwB;;AAuB7B,MAAMC,YAAY,GAAGN,KAAK,IAAI;AAC1B,2BACOA,KADP;AAGH,CAJD;;AAMA,eAAeZ,OAAO,CAACkB,YAAD,CAAP,CAAsBf,IAAtB,CAAf","sourcesContent":["import React, {Component, Fragment} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport iniModel from '../models/redux.state.ini';\r\nimport Layout from '../components/Layout';\r\n\r\nclass Page extends Component {\r\n    static getInitialProps({store, isServer, pathname, query}) {\r\n        store.dispatch({type: 'FOO', payload: 'foo'}); // component will be able to read from store's state when rendered\r\n        return {state: {...iniModel}}; // you can pass some custom props to component from here\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(this.props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Layout>\r\n                    hello world\r\n                </Layout>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst stateToProps = state => {\r\n    return {\r\n        ...state\r\n    }\r\n};\r\n\r\nexport default connect(stateToProps)(Page);\r\n"]},"metadata":{},"sourceType":"module"}