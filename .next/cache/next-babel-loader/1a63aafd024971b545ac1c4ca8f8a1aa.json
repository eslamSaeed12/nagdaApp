{"ast":null,"code":"var _jsxFileName = \"E:\\\\nagda\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport App from \"next/app\";\nimport withRedux from \"next-redux-wrapper\";\nimport testReducer from \"../reducers/test.js\";\nimport InitialStateModel from '../models/redux.state.ini';\n\nconst makeStore = (initialState, options) => {\n  return createStore(testReducer, initialState);\n};\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    // we can dispatch from here too\n    ctx.store.dispatch({\n      type: \"USER_LOG\",\n      payload: \"i am payload\"\n    });\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : InitialStateModel;\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRedux(makeStore)(MyApp);","map":{"version":3,"sources":["E:/nagda/pages/_app.js"],"names":["React","createStore","applyMiddleware","Provider","App","withRedux","testReducer","InitialStateModel","makeStore","initialState","options","MyApp","getInitialProps","Component","ctx","store","dispatch","type","payload","pageProps","render","props"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;AAEA,MAAMC,SAAS,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AACzC,SAAOT,WAAW,CAACK,WAAD,EAAcG,YAAd,CAAlB;AACH,CAFD;;AAIA,MAAME,KAAN,SAAoBP,GAApB,CAAwB;AACpB,eAAaQ,eAAb,CAA6B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA7B,EAA+C;AAC3C;AACAA,IAAAA,GAAG,CAACC,KAAJ,CAAUC,QAAV,CAAmB;AAACC,MAAAA,IAAI,EAAE,UAAP;AAAmBC,MAAAA,OAAO,EAAE;AAA5B,KAAnB;AACA,UAAMC,SAAS,GAAGN,SAAS,CAACD,eAAV,GACZ,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CADM,GAEZP,iBAFN;AAIA,WAAO;AAACY,MAAAA;AAAD,KAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAACP,MAAAA,SAAD;AAAYM,MAAAA,SAAZ;AAAuBJ,MAAAA;AAAvB,QAAgC,KAAKM,KAA3C;AACA,WACI,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEN,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD,eAAeI,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADJ;AAKH;;AAlBmB;;AAqBxB,eAAed,SAAS,CAACG,SAAD,CAAT,CAAqBG,KAArB,CAAf","sourcesContent":["import React from \"react\";\r\nimport {createStore, applyMiddleware} from \"redux\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"next/app\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport testReducer from \"../reducers/test.js\";\r\nimport InitialStateModel from '../models/redux.state.ini';\r\n\r\nconst makeStore = (initialState, options) => {\r\n    return createStore(testReducer, initialState);\r\n};\r\n\r\nclass MyApp extends App {\r\n    static async getInitialProps({Component, ctx}) {\r\n        // we can dispatch from here too\r\n        ctx.store.dispatch({type: \"USER_LOG\", payload: \"i am payload\"});\r\n        const pageProps = Component.getInitialProps\r\n            ? await Component.getInitialProps(ctx)\r\n            : InitialStateModel;\r\n\r\n        return {pageProps};\r\n    }\r\n\r\n    render() {\r\n        const {Component, pageProps, store} = this.props;\r\n        return (\r\n            <Provider store={store}>\r\n                <Component {...pageProps} />\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRedux(makeStore)(MyApp);\r\n"]},"metadata":{},"sourceType":"module"}