{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\nagda\\\\pages\\\\home.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { userLogIn } from '../actions/test.action';\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  function Page() {\n    _classCallCheck(this, Page);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Page).apply(this, arguments));\n  }\n\n  _createClass(Page, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, \"Prop from Redux \", this.props.foo), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"Prop from getInitialProps \", this.props.custom));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var store = _ref.store,\n          isServer = _ref.isServer,\n          pathname = _ref.pathname,\n          query = _ref.query;\n      store.dispatch({\n        type: \"FOO\",\n        payload: \"foo\"\n      }); // component will be able to read from store's state when rendered\n\n      return {\n        custom: \"custom\"\n      }; // you can pass some custom props to component from here\n    }\n  }]);\n\n  return Page;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fuckThis: function fuckThis() {\n      return dispatch(userLogIn());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);","map":{"version":3,"sources":["E:/nagda/pages/home.js"],"names":["React","Component","connect","userLogIn","Page","console","log","props","foo","custom","store","isServer","pathname","query","dispatch","type","payload","mapStateToProps","state","mapDispatchToProps","fuckThis"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,SAAR,QAAwB,wBAAxB;;IACMC,I;;;;;;;;;;;;;wCAMgB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACD;;;6BACQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAsB,KAAKA,KAAL,CAAWC,GAAjC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAgC,KAAKD,KAAL,CAAWE,MAA3C,CAFF,CADF;AAMD;;;0CAf4D;AAAA,UAApCC,KAAoC,QAApCA,KAAoC;AAAA,UAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,UAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,UAATC,KAAS,QAATA,KAAS;AAC3DH,MAAAA,KAAK,CAACI,QAAN,CAAe;AAAEC,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,OAAO,EAAE;AAAxB,OAAf,EAD2D,CACV;;AACjD,aAAO;AAAEP,QAAAA,MAAM,EAAE;AAAV,OAAP,CAF2D,CAE9B;AAC9B;;;;EAJgBR,S;;AAmBnB,IAAMgB,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLA,IAAAA,KAAK,EAAEA;AADF,GAAP;AAGD,CAJD;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAL,QAAQ,EAAI;AACrC,SAAO;AACLM,IAAAA,QAAQ,EAAG;AAAA,aAAKN,QAAQ,CAACX,SAAS,EAAV,CAAb;AAAA;AADN,GAAP;AAGD,CAJD;;AAKA,eAAeD,OAAO,CAACe,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cf,IAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {userLogIn} from '../actions/test.action'\r\nclass Page extends Component {\r\n  static getInitialProps({ store, isServer, pathname, query }) {\r\n    store.dispatch({ type: \"FOO\", payload: \"foo\" }); // component will be able to read from store's state when rendered\r\n    return { custom: \"custom\" }; // you can pass some custom props to component from here\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>Prop from Redux {this.props.foo}</div>\r\n        <div>Prop from getInitialProps {this.props.custom}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    state: state\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fuckThis : ()=> dispatch(userLogIn())\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);\r\n"]},"metadata":{},"sourceType":"module"}